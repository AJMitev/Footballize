@using System.Globalization
@model Footballize.Web.ViewModels.Gathers.GatherListViewModel
@{
    ViewData["Title"] = "Index";
}

<div id="breadcrumb">
    <nav aria-label="breadcrumb" role="navigation">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item active" aria-current="id">Gathers</li>
        </ol>
    </nav>
</div>
<h2 class="title text-center">Games Available</h2>
@if (TempData.ContainsKey("Error"))
{
    <div class="text-center">
        <div class="alert text-danger"><strong>Error!</strong> @TempData["Error"]</div>
    </div>
}
<div class="text-right">
    <a asp-action="Create" class="btn btn-primary btn-round">
        <i class="material-icons">add</i> Create new Gather
        <div class="ripple-container"></div>
    </a>
</div>
<div>
    <table class="table">
        <thead>
            <tr class="text-center">

                <th scope="col">Title</th>
                <th scope="col">City</th>
                <th scope="col">Field</th>
                <th scope="col">Game Time</th>
                <th scope="col">Players</th>
                <th scope="col">Creator</th>
                <th scope="col">Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in Model.Gathers.OrderBy(x => x.StartingAt))
            {
                <tr class="text-center">
                    <th scope="row" class="text-left">@match.Title</th>
                    <td>@match.Pitch.TownName, @match.Pitch.CountryName</td>
                    <td>@match.Pitch.Name</td>


                    @if (match.StartingAt.Day == DateTime.Today.Day)
                    {
                        <td> @string.Concat("Today, at ", match.StartingAt.ToString("HH:mm"))</td>
                    }
                    else if (match.StartingAt.Day == DateTime.Today.AddDays(1).Day)
                    {
                        <td> @string.Concat("Tomorrow, at ", match.StartingAt.ToString("HH:mm"))</td>
                    }
                    else
                    {

                        <td>@match.StartingAt.ToString("dd/MM/yyyy HH:ss")</td>
                    }
                    <td>@match.PlayersEnrolled/@match.MaximumPlayers</td>
                    <td><a href="#">@match.Creator.UserName</a></td>
                    <td>
                        <a asp-controller="Gathers" asp-action="Details" asp-route-id="@match.Id" class="btn btn-primary btn-fab btn-round">
                            <i class="material-icons">toc</i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
<nav aria-label="Previous">
    <ul class="pagination justify-content-center">
        @if (this.Model.CurrentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" asp-controller="Gathers" asp-action="Index" asp-route-id="@this.Model.PreviousPage" aria-label="Предишна">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        @{
            const int MorePagesToShow = 3;
            var pagesToShow = new List<int>();
            for (var i = 1; i <= MorePagesToShow; i++)
            {
                pagesToShow.Add(i);
            }
            for (var i = this.Model.CurrentPage - MorePagesToShow; i <= this.Model.CurrentPage + MorePagesToShow; i++)
            {
                if (i > 0)
                {
                    pagesToShow.Add(i);
                }
            }
            for (var i = this.Model.PagesCount - MorePagesToShow + 1; i <= this.Model.PagesCount; i++)
            {
                if (i > 0)
                {
                    pagesToShow.Add(i);
                }
            }
            pagesToShow = pagesToShow.Where(x => x <= this.Model.PagesCount).Distinct().OrderBy(x => x).ToList();
        }
        @for (var i = 0; i < pagesToShow.Count; i++)
        {
            var className = string.Empty;
            var pageNumber = pagesToShow[i];
            if (pageNumber == this.Model.CurrentPage)
            {
                className = "active";
            }
            if (i > 0 && pageNumber - 1 != pagesToShow[i - 1])
            {
                <li class="page-item @className"><a class="page-link" asp-controller="Gathers" asp-action="Index" asp-route-id="@(pagesToShow[i - 1] + 1)" >...</a></li>
            }
            <li class="page-item @className"><a class="page-link" asp-controller="Gathers" asp-action="Index" asp-route-id="@pageNumber">@pageNumber</a></li>
        }
        @if (this.Model.CurrentPage < this.Model.PagesCount)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-id="@Model.NextPage" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
    </ul>
</nav>
